import random
import sqlite3

from PIL import Image, ImageDraw, ImageFont


def fetch_all_from_db():
    try:
        with sqlite3.connect("olympiad.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users")  # –ó–∞–º–µ–Ω–∏—Ç–µ 'users' –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
            rows = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            for row in rows:
                print(row)  # –ü–µ—á–∞—Ç–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

#fetch_all_from_db()

def init_db():
    with sqlite3.connect("olympiad.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                first_name TEXT NOT NULL,
                last_name TEXT NOT NULL,
                school_class INTEGER,
                class_letter TEXT,
                email TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                payment_status INTEGER DEFAULT 0,
                score_1 INTEGER DEFAULT 0,
                score_2 INTEGER DEFAULT 0,
                score_3 INTEGER DEFAULT 0,
                test_date TEXT,
                certificate_path TEXT,
                forgot_password TEXT
            );
        """)
        conn.commit()

#init_db()

def update_db_payment_status(id):
    with sqlite3.connect("olympiad.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE users
            SET score_1 = ?
            WHERE id = ?
        """, (0, id))
        conn.commit()

#update_db_payment_status(1)

def generate_certificate(user_id, user_name, user_score):
    try:
        # –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
        full_name = user_name
        x_offset = 860
        y_offset = 535

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        image = Image.open("static/certificate/certificate.png")

        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        draw = ImageDraw.Draw(image)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º TTF-—à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        font_path = "OpenSans-Medium.ttf"  # –ü–æ–ª–æ–∂–∏ —Å—é–¥–∞ —Å–≤–æ–π —à—Ä–∏—Ñ—Ç
        font_size = 50
        font = ImageFont.truetype(font_path, font_size)

        # –ü–æ–∑–∏—Ü–∏—è ‚Äî —Å —É—á—ë—Ç–æ–º —Å–º–µ—â–µ–Ω–∏–π (x_offset, y_offset)
        x = x_offset
        y = y_offset

        # –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
        draw.text((x, y), full_name, font=font, fill=(0, 0, 0))
        draw.text((800, 750), user_score, font=font, fill=(0, 0, 0))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ certificate/1.jpg
        image.save(f"static/certificate/1/certificate.png")

        return f"static/certificate/1/certificate.png"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        return None

generate_certificate(1, "–ø–∫ –ø–∫", str(1))


import fitz  # PyMuPDF
import os
from PIL import Image
from io import BytesIO

def pdf_photo():
    pdf_file = "transfer-receipt-13_706129645213422312.pdf"
    output_dir = "images"
    os.makedirs(output_dir, exist_ok=True)

    doc = fitz.open(pdf_file)

    for page_number in range(len(doc)):
        page = doc[page_number]
        images = page.get_images(full=True)

        for img_index, img in enumerate(images):
            xref = img[0]
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            image_ext = base_image["ext"]
            image_filename = f"page{page_number + 1}_img{img_index + 1}.{image_ext}"

            # üîç –†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ PIL
            file_io = BytesIO(image_bytes)
            image = Image.open(file_io)

            # üëâ –ü—Ä–∏–º–µ—Ä: —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é
            resized = image.resize((300, 300))
            resized_path = os.path.join(output_dir, f"resized_{image_filename}")
            resized.save(resized_path)
            print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {resized_path}")

            # üëâ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –µ—â—ë ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä ‚Äî –¥–æ–±–∞–≤–ª—è–π —Ç—É—Ç

    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

#pdf_photo()